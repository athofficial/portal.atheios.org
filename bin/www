#!/usr/bin/env node

/**
 * Module dependencies.
 */

global.config = require("../config")();

var app = require('../app');
var debug = require('debug')('portal:server');
var http = require('http');
var WebSocket = require('ws');

const {MISC_makeid, MISC_maketoken} = require('../misc');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(global.config.PORT || '3002');
app.set('port', port);
console.log("Server started:", global.config.httphost,":",global.config.PORT);



/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const wss = new WebSocket.Server({ port: 3003 });

wss.on('connection', (ws, req) => {
  // Let us check first if the request comes from a valid game id
  console.log(req.url, req.headers);
  var urlarray = req.url.split('/');
  // urlarray[1] is 'ws'
  // urlarray[2] is gameid
  if (urlarray[1]==="ws") {
    // initial access which we redirect to another server
    console.log("Initial access.");
    jstring="{\"@class\":\".AuthenticatedConnectRequest\", \"connectUrl\":\"ws:localhost:3003/fs/"+ urlarray[2] +"\", \"requestId\":\"0\"}";
    ws.send(jstring);
  } else {
    if (urlarray[1]==="fs") {
      // Redirected access
      console.log("Redirected access.");
      var sql = "SELECT * FROM gameasset WHERE asset_token='" + urlarray[2] + "' AND asset_options&1=1 AND asset_ready=2";
      if (debugon)
        console.log(sql);
      pool.query(sql, function (error, rows, fields) {
        if (error) {
          console.log(error);
          throw(error);
        } else {
          if (debugon)
            console.log("Game exists");
          // Gane exists and is published
          //  const ip = ws.headers['x-forwarded-for'].split(/\s*,\s*/)[0];
          console.log("Connection established.");
          // okay we received a connect. This connect is taregtedd to the main server. In order to offload we could request to connect to a different server
          // For that reason we will send back the config data for connection. We potentially could offload to different geografical reasons based on IP
          // generate a nonce
          var randstr = MISC_maketoken(5);
          jstring = "{\"@class\":\".AuthenticatedConnectResponse\", \"nonce\":\"+ randstr +\", \"requestId\":\"0\"}";
          ws.send(jstring);


          ws.on('message', function incoming(message) {
            console.log('received: %s', message);
            // Here we handle the different incoming items
            try {
              var result = JSON.parse(message);
            } catch (e) {
              this.log('An error ocurred while parsing the JSON Data: ' + message + '; Error: ' + e);
              return;
            }

            var resultType = result['@class'];

            if (resultType === '.AuthenticatedConnectRequest') {
              console.log("Found AuthenticatedConnectRequest")
              var hmac = result['hmac'];
//      var ownhmac = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(randstr, ""));
              jstring = "{\"@class\":\".AuthenticatedConnectResponse\", \"requestId\":\"0\", \"seesionId\":\"" + randstr + "\"}";
              ws.send(jstring);
            }
          });
        }
      });

    } else
    {
      // strange access
      ws.close();
    }
  }

});







/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
